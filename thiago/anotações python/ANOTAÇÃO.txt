Minhas anotações ate agr  :D


-~-~-~-~-~-~-~-~- Tipos primitivos ~-~-~-~-~-~-~-~-~-

  int()  --> Para números inteiros ------------ 17, 21, 35, 42

  float() -> Números de ponto flutuante ---2.3, 1.6, 14.9, -67.1

  bool() --> Armazena True ou False --------True, False

  str() ----> Conjunto de caracteres -------- 'narigudo', 'Pedro', 'feioso'

  type() ---> Indica o tipo primitivo da var -  x = 'Sapo Tunado'   print(type(x)) logo seu tipo primitivo é string

-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-


-~-~-~-~-~-~-~- Operadores Aritméticos ~-~-~-~-~-~-~-

  + -> Adição              ** -> Potencia
  - -> Subtração           // -> Divisão inteira
  * -> Multiplicação        % -> Resto da divisão
  / > Divisão -


           Ordem de Precedência

  1° -> ()
  2° -> **
  3° -> *  /  //  %
  4° -> +  -

-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-


~-~-~-~-~-~-~--~-~-~ Módulos -~-~-~-~-~-~-~-~-~-~-~

  Import > Importa uma biblioteca - import math

  from math import cos -> Importa somente a funçao cos da biblioteca math

  math -> Biblioteca de operadores aritméticos {

     sqrt()  ---> Raiz Quadrada de um numero ------- raiz = math.sqrt(numero)
     floor() ---> Arredonda o numero para baixo ---- 5,23 fica 5,00
     ceil() -----> Retorna um valor inteiro ---------------- 5,23 fica 5
     hypot() ---> Retorna a hipotenusa dos catetos - math.hypot(co, ca)
     pow() ----> Potencia de um numero ---------------- pow(2, 3) = 2³ = 8
     radians()-> Converte em graus radianos ---------- print(math.radians(180))
     cos() -----> Retorne o cosseno em radianos --- print(math.cos(math.radians(x)))
     sin() ------> Retorne o seno em radianos --------- print(math.sin(math.radians(x)))
     tan() -----> Retorne a tangente em radianos---- print(math.tan(math.radians(x)))
  }

  random -> Gerar numeros pseudoaleatorios {

      randint() > Retorna um numero inteiro no range --------------- random.randint(1, 10)
      choice() --> Retorna um elemento aleatório da sequência - random.choice(x)
      shuffle() > Embaralha a sequência x no lugar ------------------- random.shuffle(y)
  }
-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-


-~-~-~-~-~-~-~-~- Manipulando Textos ~-~-~-~-~-~-~-~-

  frase = 'ESTOU APRENDENDO A PROGRAMAR EM PYHTON'

  frase[9] ------> Pega os caracteres das posições indicadas ------------------- letra E
  frase[9:13] -> Pega os caracteres das posições indicadas ------------------- ENDE
  frase[9:18:2]--> Pega os caracteres das posições indicadas pulando 2 - EDNOA
  len() -------------> Mostra quantas letras tem a frase -------------------------------- len(frase) = 38 letras
  count() ---------> Conta quantas vezes aparece a letra escolhida ----------- frase.count('s')
  find() ------------> Procura os caracteres escolhido ---------------------------------- frase.find('aprendendo')
  replace() ------> Troca uma palavra por outra na frase --------------------------- frase.replace('python','JavaScript')
  upper() ---------> Colocar todas as outras letras em maiúsculo -------------- frase.upper()
  lower() ---------> Colocar todas as outras letras em minusculo -------------- frase.lower()
  capilalize() ---> Coloca todas a frase em minusculo menos a 1 letra --- frase.capitalize()
  title() ------------> Todas as palavras começa com letra maiúscula --------- frase.title()
  strip() -----------> Tira o espaço do começo e no fim da frase ----------------- frase.strip()  frase.lstrip()  frase.rstrip()
  split() -----------> Vai ocorrer uma divisão entre os espaços da frase ----- frase.split()
  .join() -----------> Juntar uma coisa com a outra -------------------------------------- '-'.join.frase Estou-aprendendo-a-programar-em-python
  IMPORTANTE: ----------->  o [-1] pode ser utilizado para se referir ao último objeto de uma lista, assim como [-2] seria a penúltima e assim por diante.

-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-

-~-~-~-~-~-~-~-~-~-~-~-~GIT~-~-~-~-~-~-~-~-~-~-~-~-~-

para criar uma chave SSH em seu computador digite o codigo no console do git: ssh-keygen -t ed25519 -C "your_email@example.com"

Configurando sua identificação no Git
git config --global user.name "Seu nome"
git config --global user.email "Seu email de cadastro do Github"git config --list

Passo a passo: salvar primeira versão de um
projeto no Github:

git init
git add .
git commit -m "Mensagem explicativa"
git branch -M main
git remote add origin git@github.com:seuusuario/seurepositorio.git
git push -u origin main

Passo a passo: salvar uma nova versão:

git status
git add .
git commit -m "Mensagem explicativa"
git push


Demo: clonar e modificar um projeto de um repositório
remoto que você tem permissão para alterar
git clone git@github.com:seuusuario/seurepositorio.git
git add .
git commit -m "Mensagem explicativa"
git push


Verificando o histórico de versões
git log
git log --oneline
Listagem resumida:


Git diff • Comando que mostra a diferença entre arquivos modificados
• Dica: utilizar o VS Code, que mostra graficamente as diferenças




Git checkout • Permite modificar temporariamente os arquivos do projeto ao estado de um dado commit
ou branch
• Código do commit, HEAD
• Cada commit possui um código, que pode ser utilizado para referenciar o commit • O último commit do histórico do branch corrente também pode ser referenciado pela palavra HEAD• É possível referenciar um commit N versões antes de HEAD usando ~N, por exemplo: • HEAD~1 (penúltimo commit) • HEAD~2 (antepenúltimo commit) • IMPORTANTE: antes de fazer o checkout para voltar para HEAD, certifique-se de que não
haja mudanças nos arquivos. Se você acidentalmente mudou alguma coisa, desfaça as
modificações usando:
git reset
git clean -df
git checkout -- .


Arquivo .gitignore
• É um arquivo que indica o que NÃO deve ser salvo pelo Git. • Geralmente o arquivo .gitignore fica salvo na pasta principal do repositório. Mas
também é possível salvar outros arquivos .gitignore em subpastas do repositório,
para indicar o que deve ser ignorado por cada subpasta



Casos comuns de arquivos que não devem ser
salvos pelo Git: • Arquivos compilados
Linguagens compiladas (C, C++, Java, C#, etc.) geram arquivos de código compilado para executar o programa
localmente.
 • Arquivos de bibliotecas externas usadas no projeto
Projetos reais utilizam bibliotecas externas (programas prontos disponíveis na Internet). Por exemplo, projetos
JavaScript com NPM tipicamente salvam uma subpasta "node_modules" na pasta do seu projeto. • Arquivos de configuração da sua IDE
IDE's podem salvar uma subpasta com arquivos de configuração na pasta do projeto (exemplo: .vscode). • Arquivos de configuração do seu sistema
Por exemplo, sistemas Mac podem gravar uma subpasta .ds_store na pasta do projeto


-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-

